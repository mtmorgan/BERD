[{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://mtmorgan.github.io/BERD/articles/a_introduction_to_r.html","id":"r","dir":"Articles","previous_headings":"","what":"R","title":"Introduction to R","text":"","code":"1 + 2 #> [1] 3 sqrt(2) #> [1] 1.414214"},{"path":"https://mtmorgan.github.io/BERD/articles/a_introduction_to_r.html","id":"vectors-and-variables","dir":"Articles","previous_headings":"R","what":"Vectors and variables","title":"Introduction to R","text":"R usually works vectors values usually makes sense assign vector values variable, make easy repeatedly reference set values Types vectors logical – c(TRUE, FALSE) integer – c(1, 2, 3) numeric – c(1.41, 2.30, 3.14159) character – c(\"May\", \"June\", \"July\") complex Statistical concepts use NA vector, e.g., c(1, 2, NA, 3) Often, experimental design, defined number groups, e.g., ‘treatment’ ‘control’ Use factor represent values Operations, e.g., numeric two vectors – element-wise vector scalar – scalar ‘recycled’ length vector, element-wise operations preformed Common operations logical – & (‘’), | (‘’), ! (), == (element-wise equivalence) integer / numeric – +, -, *. Comparison ==, >, >=, <, <=. Many functions like log(), sqrt(), … character – paste() (paste two string togther), nchar(), substring() Subsetting","code":"c(1, 2, 3) #> [1] 1 2 3 x <- c(1, 2, 3) x #> [1] 1 2 3 levels <- c(\"treatment\", \"control\") # possible values ## observed values -- four samples values <- c(\"treatment\", \"treatment\", \"control\", \"control\") factor(values, levels = levels) #> [1] treatment treatment control   control   #> Levels: treatment control x <- c(1, 2, 3) y <- c(4, 5, 6) x + y #> [1] 5 7 9 x * 2 #> [1] 2 4 6 c(TRUE, TRUE, FALSE, FALSE) & c(TRUE, FALSE, TRUE, FALSE) #> [1]  TRUE FALSE FALSE FALSE c(TRUE, TRUE, FALSE, FALSE) | c(TRUE, FALSE, TRUE, FALSE) #> [1]  TRUE  TRUE  TRUE FALSE !c(TRUE, TRUE, FALSE, FALSE) #> [1] FALSE FALSE  TRUE  TRUE c(TRUE, TRUE, FALSE, FALSE) == c(TRUE, FALSE, TRUE, FALSE) #> [1]  TRUE FALSE FALSE  TRUE ## Fun! c(TRUE, FALSE, NA) & c(NA, NA, NA) #> [1]    NA FALSE    NA c(TRUE, FALSE, NA) | c(NA, NA, NA) #> [1] TRUE   NA   NA month <- c(\"April\", \"May\", \"June\", \"July\") year <- c(\"2020\", \"2021\", \"2022\", \"2023\") paste(year, month) #> [1] \"2020 April\" \"2021 May\"   \"2022 June\"  \"2023 July\" x <- c(1, 2, 3, 4) x[c(1, 3)] #> [1] 1 3 x[x >= 3] #> [1] 3 4"},{"path":"https://mtmorgan.github.io/BERD/articles/a_introduction_to_r.html","id":"data-frame","dir":"Articles","previous_headings":"R","what":"data.frame","title":"Introduction to R","text":"Organizing vectors columns Subsetting columns rows Column access $; can useful subset [[; useful variable defines column interest","code":"df <- data.frame(     Month = month, Year = year,     Temperature = c(20, 22, 24, 25) ) df #>   Month Year Temperature #> 1 April 2020          20 #> 2   May 2021          22 #> 3  June 2022          24 #> 4  July 2023          25 df[, c(\"Month\", \"Temperature\")] #>   Month Temperature #> 1 April          20 #> 2   May          22 #> 3  June          24 #> 4  July          25 df[c(1, 3), ] #>   Month Year Temperature #> 1 April 2020          20 #> 3  June 2022          24 df$Temperature #> [1] 20 22 24 25 df[df$Temperature > 22,] #>   Month Year Temperature #> 3  June 2022          24 #> 4  July 2023          25 column_of_interest <- \"Temperature\" df[[ column_of_interest ]] #> [1] 20 22 24 25"},{"path":"https://mtmorgan.github.io/BERD/articles/a_introduction_to_r.html","id":"functions","dir":"Articles","previous_headings":"R","what":"Functions","title":"Introduction to R","text":"Look help page rnorm – ?rnorm Plot histogram using hist()  Generate two equal-length vectors visualize scatter plot   Place x y data.frame, use plot  Subset just positive quadrant  built-data frame – mtcars Plot miles per gallon mpg function number cylinders, cyl  Note though cyl probably factor – finite number possible values. Treat cyl factor plotting","code":"x <- rnorm(100) x #>   [1]  1.621867412  0.451509401 -0.895716870  0.006183746  0.315956010 #>   [6]  0.237815921  0.322570292 -0.363770157 -0.961025274 -0.389008954 #>  [11]  0.481916271  0.287436836  0.937568473 -0.254780147 -0.571365016 #>  [16]  0.052042422 -0.027673424  0.267169284  0.396574023  0.069468284 #>  [21] -1.608155247  1.699710924 -0.103936058 -0.825939835 -1.318595439 #>  [26] -0.730612133 -0.079732270  0.930308798  1.646045132  0.315424938 #>  [31]  0.498684647 -0.088193905  0.422955331  2.237432463  1.127936437 #>  [36] -0.228046840  1.366318451  0.109887754 -0.399645029  0.631806880 #>  [41] -0.223145400 -0.822189431  1.276528033  0.201744558  1.000728158 #>  [46] -0.395378948  1.041320492  0.606587276 -1.500869639 -0.203470638 #>  [51]  0.745987338 -1.163696359  0.438806183  1.371423590 -0.231400895 #>  [56] -1.158868519 -0.564638664  0.368478003  0.146920747  3.475163361 #>  [61] -0.652417532 -0.554290397 -0.943802529  0.003373606  0.466979867 #>  [66] -0.201855792  2.042945410  1.734902726  0.620625255  0.859602556 #>  [71] -1.277575993 -1.067144517  0.534956593  0.620234403 -0.561270502 #>  [76] -0.715248145 -1.731893015  0.223731671 -0.163708566 -2.123118203 #>  [81] -1.260404963  0.884878902  0.085872600  0.726548748 -2.261009801 #>  [86]  0.241085759  1.476297144 -1.742422195  2.179763949 -1.325945394 #>  [91] -0.267764196 -0.366123416  0.723083910  2.257331427 -0.224124068 #>  [96] -1.319856442 -1.071806179 -1.352386560  0.597379853 -0.072292032 x <- rnorm(1000) hist(x) y <- x + rnorm(1000) # element-wise addition; each element of 'y' is                      # the sum of two random variables plot(x, y)           # one way to plot plot(y ~ x)          # another way to plot -- 'y as a function of x' df <- data.frame(X = x, Y = y) plot(Y ~ X, df) plot(Y ~ X, df[df$X > 0 & df$Y > 0,]) mtcars #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 plot(mpg ~ cyl, mtcars) # scatter plot mtcars$cyl #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 factor(mtcars$cyl) # 'levels' have a sensible default #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 #> Levels: 4 6 8 plot(mpg ~ factor(cyl), mtcars)"},{"path":"https://mtmorgan.github.io/BERD/articles/a_introduction_to_r.html","id":"packages","dir":"Articles","previous_headings":"R","what":"Packages","title":"Introduction to R","text":"Examples: dplyr: data manipulation based ‘tidy’ principles. ggplot2: plotting using ‘grammar graphics’ Installation Packages need installed Use Attach packages R session like use tibble versus data.frame values displayed – really useful even small data set column data types indicated Pipes |> takes value ‘left-hand side’ uses first argument function ‘right-hand side’ can useful paradigm – ‘take mtcars data set, apply tibble function ’ – allows series related operations chained together","code":"## also possible to use RStudio 'Packages' panel... install.packages(\"dplyr\", repos = \"https://CRAN.R-project.org\") library(dplyr) tbl <- tibble(mtcars) tbl #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows tbl <-     mtcars |>     tibble()"},{"path":"https://mtmorgan.github.io/BERD/articles/a_introduction_to_r.html","id":"help","dir":"Articles","previous_headings":"R","what":"Help!!!","title":"Introduction to R","text":"RStudio R help individual commands, use ? command line, e.g., ?data.frame package help, try sources help Google StackOverflow ChatGPT & AI can amazingly helpful, especially asked perform specific tasks also useful ‘explain code’ ‘add comments code’ halucinations!","code":"vignette(package = \"dplyr\") #> Vignettes in package 'dplyr': #>  #> colwise                 Column-wise operations (source, html) #> base                    dplyr <-> base R (source, html) #> grouping                Grouped data (source, html) #> dplyr                   Introduction to dplyr (source, html) #> programming             Programming with dplyr (source, html) #> rowwise                 Row-wise operations (source, html) #> two-table               Two-table verbs (source, html) #> in-packages             Using dplyr in packages (source, html) #> window-functions        Window functions (source, html) #>  vignette(package = \"dplyr\", \"dplyr\")"},{"path":"https://mtmorgan.github.io/BERD/articles/a_introduction_to_r.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Introduction to R","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4 #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.5       cli_3.6.2         knitr_1.45        rlang_1.1.3       #>  [5] xfun_0.43         highr_0.10        purrr_1.0.2       generics_0.1.3    #>  [9] textshaping_0.3.7 jsonlite_1.8.8    glue_1.7.0        htmltools_0.5.8   #> [13] ragg_1.3.0        sass_0.4.9        fansi_1.0.6       rmarkdown_2.26    #> [17] tibble_3.2.1      evaluate_0.23     jquerylib_0.1.4   fastmap_1.1.1     #> [21] yaml_2.3.8        lifecycle_1.0.4   memoise_2.0.1     compiler_4.3.3    #> [25] fs_1.6.3          pkgconfig_2.0.3   systemfonts_1.0.6 digest_0.6.35     #> [29] R6_2.5.1          tidyselect_1.2.1  utf8_1.2.4        pillar_1.9.0      #> [33] magrittr_2.0.3    bslib_0.6.2       tools_4.3.3       pkgdown_2.0.7     #> [37] cachem_1.0.8      desc_1.4.3"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"example-data-brfss","dir":"Articles","previous_headings":"Data input","what":"Example data: BRFSS","title":"Data input and manipulation","text":"Download data work Read data R tibble using readr package.","code":"url <- \"https://raw.githubusercontent.com/mtmorgan/BERD/main/inst/extdata/BRFSS-subset.csv\" destination <- file.path(\"data\", basename(url)) if (!file.exists(destination)) {     dir.create(\"data\")     download.file(url, destination) } brfss <- readr::read_csv(destination) #> Rows: 20000 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Sex #> dbl (4): Age, Weight, Height, Year #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. brfss #> # A tibble: 20,000 × 5 #>      Age Weight Sex    Height  Year #>    <dbl>  <dbl> <chr>   <dbl> <dbl> #>  1    31   49.0 Female   157.  1990 #>  2    57   81.6 Female   157.  1990 #>  3    43   80.3 Male     178.  1990 #>  4    72   70.3 Male     170.  1990 #>  5    31   49.9 Female   155.  1990 #>  6    58   54.4 Female   155.  1990 #>  7    45   69.9 Male     173.  1990 #>  8    37   68.0 Male     180.  1990 #>  9    33   65.8 Female   170.  1990 #> 10    75   70.8 Female   152.  1990 #> # ℹ 19,990 more rows"},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"explore-the-data-using-dplyr","dir":"Articles","previous_headings":"","what":"Explore the data using dplyr","title":"Data input and manipulation","text":"Attach dplyr current R session. Useful functions data exploration count() – count occurence values one columns summarize() – flexible summary columns group_by() – summarize perform operations group Functions data manipulation mutate() – update add columns filter() – remove rows based column values select() – remove, rearrange, re-name columns","code":"library(dplyr)"},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"count","dir":"Articles","previous_headings":"Explore the data using dplyr","what":"count()","title":"Data input and manipulation","text":"Count observed values one… …several columns","code":"brfss |>     count(Year) #> # A tibble: 2 × 2 #>    Year     n #>   <dbl> <int> #> 1  1990 10000 #> 2  2010 10000 brfss |>     count(Sex) #> # A tibble: 2 × 2 #>   Sex        n #>   <chr>  <int> #> 1 Female 12039 #> 2 Male    7961 brfss |>     count(Year, Sex) #> # A tibble: 4 × 3 #>    Year Sex        n #>   <dbl> <chr>  <int> #> 1  1990 Female  5718 #> 2  1990 Male    4282 #> 3  2010 Female  6321 #> 4  2010 Male    3679"},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"summarize","dir":"Articles","previous_headings":"Explore the data using dplyr","what":"summarize()","title":"Data input and manipulation","text":"flexible summary, e.g., number observations n() mean values columns, removing NA, mean(, na.rm = TRUE).","code":"brfss |>     summarize(         n = n(),         ave_age = mean(Age, na.rm = TRUE),         ave_wt = mean(Weight, na.rm = TRUE),         ave_ht = mean(Height, na.rm = TRUE)     ) #> # A tibble: 1 × 4 #>       n ave_age ave_wt ave_ht #>   <int>   <dbl>  <dbl>  <dbl> #> 1 20000    51.0   75.4   169."},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"group_by","dir":"Articles","previous_headings":"Explore the data using dplyr","what":"group_by()","title":"Data input and manipulation","text":"Often data sets contain groups can summarized separately, e.g., calculating mean values Year Sex.","code":"brfss |>     group_by(Year, Sex) |>     summarize(         n = n(),         ave_age = mean(Age, na.rm = TRUE),         ave_wt = mean(Weight, na.rm = TRUE),         ave_ht = mean(Height, na.rm = TRUE)     ) #> `summarise()` has grouped output by 'Year'. You can override using the #> `.groups` argument. #> # A tibble: 4 × 6 #> # Groups:   Year [2] #>    Year Sex        n ave_age ave_wt ave_ht #>   <dbl> <chr>  <int>   <dbl>  <dbl>  <dbl> #> 1  1990 Female  5718    46.2   64.8   163. #> 2  1990 Male    4282    43.9   81.2   178. #> 3  2010 Female  6321    57.1   73.0   163. #> 4  2010 Male    3679    56.2   88.8   178."},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"mutate","dir":"Articles","previous_headings":"Explore the data using dplyr","what":"mutate()","title":"Data input and manipulation","text":"Year Sex really factors. Also, add column log-10 transformed weight.","code":"brfss_clean <-     brfss |>     mutate(         Year = factor(Year, levels = c(\"1990\", \"2010\")),         Sex = factor(Sex, levels = c(\"Female\", \"Male\")),         Log10Weight = log10(Weight)     ) brfss_clean #> # A tibble: 20,000 × 6 #>      Age Weight Sex    Height Year  Log10Weight #>    <dbl>  <dbl> <fct>   <dbl> <fct>       <dbl> #>  1    31   49.0 Female   157. 1990         1.69 #>  2    57   81.6 Female   157. 1990         1.91 #>  3    43   80.3 Male     178. 1990         1.90 #>  4    72   70.3 Male     170. 1990         1.85 #>  5    31   49.9 Female   155. 1990         1.70 #>  6    58   54.4 Female   155. 1990         1.74 #>  7    45   69.9 Male     173. 1990         1.84 #>  8    37   68.0 Male     180. 1990         1.83 #>  9    33   65.8 Female   170. 1990         1.82 #> 10    75   70.8 Female   152. 1990         1.85 #> # ℹ 19,990 more rows"},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"filter","dir":"Articles","previous_headings":"Explore the data using dplyr","what":"filter()","title":"Data input and manipulation","text":"Create subset data includes Male samples, … …Female samples 2010.","code":"brfss_male <-     brfss_clean |>     filter(Sex == \"Male\") brfss_male #> # A tibble: 7,961 × 6 #>      Age Weight Sex   Height Year  Log10Weight #>    <dbl>  <dbl> <fct>  <dbl> <fct>       <dbl> #>  1    43   80.3 Male    178. 1990         1.90 #>  2    72   70.3 Male    170. 1990         1.85 #>  3    45   69.9 Male    173. 1990         1.84 #>  4    37   68.0 Male    180. 1990         1.83 #>  5    56   88.5 Male    180. 1990         1.95 #>  6    74   81.6 Male    183. 1990         1.91 #>  7    19   93.0 Male    183. 1990         1.97 #>  8    35   97.5 Male    193. 1990         1.99 #>  9    60   78.0 Male    170. 1990         1.89 #> 10    29   77.1 Male    175. 1990         1.89 #> # ℹ 7,951 more rows brfss_female_2010 <-     brfss_clean |>     filter(Sex == \"Female\", Year == \"2010\") brfss_female_2010 #> # A tibble: 6,321 × 6 #>      Age Weight Sex    Height Year  Log10Weight #>    <dbl>  <dbl> <fct>   <dbl> <fct>       <dbl> #>  1    46   45.4 Female    165 2010         1.66 #>  2    49  145.  Female    183 2010         2.16 #>  3    53   54.4 Female    155 2010         1.74 #>  4    63   77.1 Female    170 2010         1.89 #>  5    53   82.1 Female    168 2010         1.91 #>  6    64   90.7 Female    163 2010         1.96 #>  7    49   77.1 Female    173 2010         1.89 #>  8    77   72.6 Female    168 2010         1.86 #>  9    70   79.4 Female    178 2010         1.90 #> 10    83   93.0 Female    157 2010         1.97 #> # ℹ 6,311 more rows"},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"select","dir":"Articles","previous_headings":"Explore the data using dplyr","what":"select()","title":"Data input and manipulation","text":"Use select() choose particular columns, re-order columns","code":"brfss_male |>     select(Year, Age, Weight, Log10Weight, Height) #> # A tibble: 7,961 × 5 #>    Year    Age Weight Log10Weight Height #>    <fct> <dbl>  <dbl>       <dbl>  <dbl> #>  1 1990     43   80.3        1.90   178. #>  2 1990     72   70.3        1.85   170. #>  3 1990     45   69.9        1.84   173. #>  4 1990     37   68.0        1.83   180. #>  5 1990     56   88.5        1.95   180. #>  6 1990     74   81.6        1.91   183. #>  7 1990     19   93.0        1.97   183. #>  8 1990     35   97.5        1.99   193. #>  9 1990     60   78.0        1.89   170. #> 10 1990     29   77.1        1.89   175. #> # ℹ 7,951 more rows"},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"initial-visualization","dir":"Articles","previous_headings":"","what":"Initial visualization","title":"Data input and manipulation","text":"relationship Height Weight Female samples 2010?  Weight log scale?  look like Males differ weight 1990 2010, plotted log scale?","code":"plot(Weight ~ Height, brfss_female_2010) plot(Weight ~ Height, brfss_female_2010, log = \"y\") ## another way, but maybe the Y-axis scale is harder to interpret? ## plot(Log10Weight ~ Height, brfss_female_2010) brfss_male |>     group_by(Year) |>     summarize(         n = n(),         ave_wt = mean(Weight, na.rm = TRUE),         ave_log10_wt = mean(Log10Weight, na.rm = TRUE)     ) #> # A tibble: 2 × 4 #>   Year      n ave_wt ave_log10_wt #>   <fct> <int>  <dbl>        <dbl> #> 1 1990   4282   81.2         1.90 #> 2 2010   3679   88.8         1.94 plot(Weight ~ Year, brfss_male, log = \"y\")"},{"path":"https://mtmorgan.github.io/BERD/articles/b_data_io.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Data input and manipulation","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4 #>  #> loaded via a namespace (and not attached): #>  [1] bit_4.0.5         jsonlite_1.8.8    highr_0.10        compiler_4.3.3    #>  [5] crayon_1.5.2      tidyselect_1.2.1  parallel_4.3.3    jquerylib_0.1.4   #>  [9] systemfonts_1.0.6 textshaping_0.3.7 yaml_2.3.8        fastmap_1.1.1     #> [13] readr_2.1.5       R6_2.5.1          generics_0.1.3    knitr_1.45        #> [17] tibble_3.2.1      desc_1.4.3        bslib_0.6.2       pillar_1.9.0      #> [21] tzdb_0.4.0        rlang_1.1.3       utf8_1.2.4        cachem_1.0.8      #> [25] xfun_0.43         fs_1.6.3          sass_0.4.9        bit64_4.0.5       #> [29] memoise_2.0.1     cli_3.6.2         withr_3.0.0       pkgdown_2.0.7     #> [33] magrittr_2.0.3    digest_0.6.35     vroom_1.6.5       hms_1.1.3         #> [37] lifecycle_1.0.4   vctrs_0.6.5       evaluate_0.23     glue_1.7.0        #> [41] ragg_1.3.0        fansi_1.0.6       rmarkdown_2.26    purrr_1.0.2       #> [45] tools_4.3.3       pkgconfig_2.0.3   htmltools_0.5.8"},{"path":"https://mtmorgan.github.io/BERD/articles/c_visualization.html","id":"recap-brfss-data-input","dir":"Articles","previous_headings":"","what":"Recap: BRFSS data input","title":"Statistical Analysis and Additional Visualization","text":"Download (necessary) input data day 2 using readr Attach dplyr package perform initial data transformations, create subsets data.","code":"url <- \"https://raw.githubusercontent.com/mtmorgan/BERD/main/inst/extdata/BRFSS-subset.csv\" destination <- file.path(\"data\", basename(url)) if (!file.exists(destination)) {     dir.create(\"data\")     download.file(url, destination) } brfss <- readr::read_csv(destination) library(dplyr)  brfss_clean <-     brfss |>     mutate(         Year = factor(Year, levels = c(\"1990\", \"2010\")),         Sex = factor(Sex, levels = c(\"Female\", \"Male\")),         Log10Weight = log10(Weight)     )  brfss_male <-     brfss_clean |>     filter(Sex == \"Male\")  brfss_female_2010 <-     brfss_clean |>     filter(Sex == \"Female\", Year == \"2010\")"},{"path":[]},{"path":"https://mtmorgan.github.io/BERD/articles/c_visualization.html","id":"t-test","dir":"Articles","previous_headings":"Statistical analysis","what":"t-test","title":"Statistical Analysis and Additional Visualization","text":"saw Males 2010 seemed heavier Males 1990  difference statistically significant? Answer using t-test compare mean two groups. Start consulting help page ?t.test ‘Usage’ labeled “S3 method class ‘formula’”. Use Log10Weight column comparing log-transformed Weight. p-value displayed < 2.2e-16, confident Males 2010 heavier Males 1990. ‘sample estimates’ agree values calculated using group_by() summarize(); provides us confidence done something wrong. Note t.test() actually returns object can capture manipulate, e.g., obtain vector group mean estimates.","code":"brfss_male |>     group_by(Year) |>     summarize(         n = n(),         ave_wt = mean(Weight, na.rm = TRUE),         ave_log10_wt = mean(Log10Weight, na.rm = TRUE)     ) #> # A tibble: 2 × 4 #>   Year      n ave_wt ave_log10_wt #>   <fct> <int>  <dbl>        <dbl> #> 1 1990   4282   81.2         1.90 #> 2 2010   3679   88.8         1.94 plot(Weight ~ Year, brfss_male, log = \"y\") t.test(Log10Weight ~ Year, brfss_male) #>  #>  Welch Two Sample t-test #>  #> data:  Log10Weight by Year #> t = -20.202, df = 6985.4, p-value < 2.2e-16 #> alternative hypothesis: true difference in means between group 1990 and group 2010 is not equal to 0 #> 95 percent confidence interval: #>  -0.03971348 -0.03268805 #> sample estimates: #> mean in group 1990 mean in group 2010  #>           1.903711           1.939912 t_test <- t.test(Log10Weight ~ Year, brfss_male) t_test$estimate #> mean in group 1990 mean in group 2010  #>           1.903711           1.939912"},{"path":"https://mtmorgan.github.io/BERD/articles/c_visualization.html","id":"linear-regression","dir":"Articles","previous_headings":"Statistical analysis","what":"Linear regression","title":"Statistical Analysis and Additional Visualization","text":"seems like positive relationship Height (log 10) Weight Females 2010.  Fitting linear regression R two-step process Use lm() fit linear model Use summary() anova() assess statistical significance fitted model. Start fitting model, using notation like used plot data; use Log10Weight fit log-transformed data. fit object doesn’t initially seem useful – tells us , summarizes intercept (1.1141389) slope (0.0045155), provide ANOVA table summary whether fit statistically significant. Use anova() obtain ANOVA table summarizing fit. table indicates highly significant relationship (Pr(>F) < 2.2e-16) Weight Height. summary() provides ANOVA table additional information e.g., showing 10% (‘Adjusted R-squared’) variation log 10 Weight explained Height. likely many factors contributing Weight variation. visualize linear regression, plot data points use abline() add regression line; also add ‘main’ title plot.","code":"plot(Weight ~ Height, brfss_female_2010, log = \"y\") fit <- lm(Log10Weight ~ Height, brfss_female_2010) fit #>  #> Call: #> lm(formula = Log10Weight ~ Height, data = brfss_female_2010) #>  #> Coefficients: #> (Intercept)       Height   #>    1.114139     0.004515 anova(fit) #> Analysis of Variance Table #>  #> Response: Log10Weight #>             Df Sum Sq Mean Sq F value    Pr(>F)     #> Height       1  6.330  6.3304  709.98 < 2.2e-16 *** #> Residuals 5929 52.865  0.0089                       #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 summary(fit) #>  #> Call: #> lm(formula = Log10Weight ~ Height, data = brfss_female_2010) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.28440 -0.06600 -0.01124  0.05810  0.48532  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 1.1141389  0.0276899   40.24   <2e-16 *** #> Height      0.0045155  0.0001695   26.65   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.09443 on 5929 degrees of freedom #>   (390 observations deleted due to missingness) #> Multiple R-squared:  0.1069, Adjusted R-squared:  0.1068  #> F-statistic:   710 on 1 and 5929 DF,  p-value: < 2.2e-16 plot(     Log10Weight ~ Height, brfss_female_2010,     main = \"Log 10 Weight vs Height, BRFSS Female 2010\" ) abline(fit, col = \"red\", lwd = 4) # red color, 4x default line width"},{"path":"https://mtmorgan.github.io/BERD/articles/c_visualization.html","id":"additional-analysis-and-visualization","dir":"Articles","previous_headings":"","what":"Additional analysis and visualization","title":"Statistical Analysis and Additional Visualization","text":"Let’s use ggplot2 package perform additional analysis visualization ggplot2 implements ‘grammar graphics’. author package provided unique way create plots – start ggplot() graph, add aes()thetics (plotted) geom()etries (plot aesthetics), additional layers , e.g., transform y-axis log scale.  Add linear regression using geom_smooth(method = \"lm\")  Note fitted regression includes confidence bands, can helpful trying interpret fit. Let’s specify ‘method’ geom_smooth(), letting ggplot2 use ’s default method…  ggplot2 chosen use ‘generalized additive model’ fits smoothed curve. makes fewer priori assumptions relationship Weight Height, particular suggests () linear relationship appropriate central part data, extremes Height (b) considerable uncertainty extremes Height. approach (making fewer assumptions relationship variables) appropriate early stages exploratory analysis, one still trying understand data without making additional unnecessary assumptions.","code":"library(ggplot2) ggplot(brfss_female_2010) +     aes(x = Height, y = Weight) +     geom_point() +     scale_y_log10() ggplot(brfss_female_2010) +     aes(x = Height, y = Weight) +     geom_point() +     geom_smooth(method = \"lm\") +     scale_y_log10() #> `geom_smooth()` using formula = 'y ~ x' ggplot(brfss_female_2010) +     aes(x = Height, y = Weight) +     geom_point() +     geom_smooth() +     scale_y_log10() #> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"},{"path":[]},{"path":"https://mtmorgan.github.io/BERD/articles/c_visualization.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Statistical Analysis and Additional Visualization","text":"","code":"sessionInfo() #> R version 4.3.3 (2024-02-29) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.0 dplyr_1.1.4   #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.9        utf8_1.2.4        generics_0.1.3    lattice_0.22-5    #>  [5] hms_1.1.3         digest_0.6.35     magrittr_2.0.3    evaluate_0.23     #>  [9] grid_4.3.3        fastmap_1.1.1     Matrix_1.6-5      jsonlite_1.8.8    #> [13] mgcv_1.9-1        purrr_1.0.2       fansi_1.0.6       scales_1.3.0      #> [17] textshaping_0.3.7 jquerylib_0.1.4   cli_3.6.2         rlang_1.1.3       #> [21] crayon_1.5.2      splines_4.3.3     bit64_4.0.5       munsell_0.5.0     #> [25] withr_3.0.0       cachem_1.0.8      yaml_2.3.8        tools_4.3.3       #> [29] parallel_4.3.3    tzdb_0.4.0        memoise_2.0.1     colorspace_2.1-0  #> [33] vctrs_0.6.5       R6_2.5.1          lifecycle_1.0.4   fs_1.6.3          #> [37] bit_4.0.5         vroom_1.6.5       ragg_1.3.0        pkgconfig_2.0.3   #> [41] desc_1.4.3        pkgdown_2.0.7     pillar_1.9.0      bslib_0.6.2       #> [45] gtable_0.3.4      glue_1.7.0        systemfonts_1.0.6 xfun_0.43         #> [49] tibble_3.2.1      tidyselect_1.2.1  highr_0.10        knitr_1.45        #> [53] farver_2.1.1      nlme_3.1-164      htmltools_0.5.8   rmarkdown_2.26    #> [57] labeling_0.4.3    readr_2.1.5       compiler_4.3.3"},{"path":"https://mtmorgan.github.io/BERD/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer.","code":""},{"path":"https://mtmorgan.github.io/BERD/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2024). BERD: Course Material BERD Scholars Introduction R. R package version 0.0.0.9000, https://mtmorgan.github.io/BERD/.","code":"@Manual{,   title = {BERD: Course Material for BERD Scholars Introduction to R},   author = {Martin Morgan},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://mtmorgan.github.io/BERD/}, }"},{"path":"https://mtmorgan.github.io/BERD/index.html","id":"berd","dir":"","previous_headings":"","what":"Course Material for BERD Scholars Introduction to R","title":"Course Material for BERD Scholars Introduction to R","text":"site provides course material ‘Introduction R’ workshop offered University Buffalo BERD scholars, April, 2024. preparation workshop, please Follow instructions install R RStudio Desktop Install ‘packages’ use. copy / pasting following commands R console RStudio  three one-hour sessions Introduction R Data Input Manipulation Statistical Analysis Additional Visualization","code":"pkgs <- c(\"readr\", \"dplyr\", \"ggplot2\") install.packages(pkgs, repos = \"https://CRAN.R-project.org\")"}]
